<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.1.3">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': '', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1280, 720]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="1.0000, 1.0000, 1.0000" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="SelectiveAttentionTest" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="Intro">
      <TextComponent name="IntroText">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="IntroText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Velkommen til Opmærksomheds testen. &amp;#10;&amp;#10;Du vil blive præsenteret for bogstaver&amp;#10;hold øje med b og p. &amp;#10;En af dem vil være i højre eller venstre side af skærmen. &amp;#10;Hvis du ser p klik til venstre på musen&amp;#10;Hvis du ser b klik til højre på musen&amp;#10;Klik når skærmen bliver sort&amp;#10;&amp;#10;god fornøjelse " valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="next_screen1">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="next_screen1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="FixationCross">
      <TextComponent name="FixationCrossText">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.07" valType="num" updates="constant" name="letterHeight"/>
        <Param val="FixationCrossText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="X" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="Feedback">
      <CodeComponent name="ShowFeedback">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if (enableHappyface) {&amp;#10;    fasterOpacity = 0.0;&amp;#10;    sadOpacity = 0.0;&amp;#10;    happyOpacity = 1.0;&amp;#10;}&amp;#10;if (enableSadface) {&amp;#10;    fasterOpacity = 0.0;&amp;#10;    sadOpacity = 1.0;&amp;#10;    happyOpacity = 0.0;&amp;#10;}&amp;#10;if (enableFaster) {&amp;#10;    fasterOpacity = 1.0;&amp;#10;    sadOpacity = 0.0;&amp;#10;    happyOpacity = 0.0;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#from the previous routine feedback will be provided.&amp;#10;if enableHappyface:&amp;#10;    fasterOpacity = 0.0;&amp;#10;    sadOpacity = 0.0;&amp;#10;    happyOpacity = 1.0; &amp;#10;    &amp;#10;if enableSadface:&amp;#10;    fasterOpacity = 0.0;&amp;#10;    sadOpacity = 1.0;&amp;#10;    happyOpacity = 0.0; &amp;#10;    &amp;#10;if enableFaster:&amp;#10;    fasterOpacity = 1.0;&amp;#10;    sadOpacity = 0.0;&amp;#10;    happyOpacity = 0.0; " valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="ShowFeedback" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="Faster">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.07" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Faster" valType="code" updates="None" name="name"/>
        <Param val="fasterOpacity" valType="num" updates="set every repeat" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Hurtigere" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="happy">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="graphic/happyface.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="happy" valType="code" updates="None" name="name"/>
        <Param val="happyOpacity" valType="num" updates="set every repeat" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="sad">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="graphic/sadface.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="sad" valType="code" updates="None" name="name"/>
        <Param val="sadOpacity" valType="num" updates="set every repeat" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="Pause">
      <TextComponent name="Pause_Text">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Pause_Text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Pause&amp;#10;&amp;#10;tryk på en tast når du er klar til at fortsætte" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="next_screen1_2">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="next_screen1_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="AudioVisualDistractorStimuli">
      <CodeComponent name="TrialController">
        <Param val="&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="allowedBNeutralAV = 2; &amp;#10;allowedBIncongruenceAV = 2; &amp;#10;allowedBCongruenceAV = 2;&amp;#10;allowedPNeutralAV = 2; &amp;#10;allowedPIncongruenceAV = 2; &amp;#10;allowedPCongruenceAV = 2; &amp;#10;&amp;#10;&amp;#10;#Default Distractor Volume &amp;#10;p_dis_volume = 0.0&amp;#10;b_dis_volume = 0.0&amp;#10;g_dis_volume = 0.0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="allowedBNeutralAV = 2;&amp;#10;allowedBIncongruenceAV = 2;&amp;#10;allowedBCongruenceAV = 2;&amp;#10;allowedPNeutralAV = 2;&amp;#10;allowedPIncongruenceAV = 2;&amp;#10;allowedPCongruenceAV = 2;&amp;#10;p_dis_volume = 0.0;&amp;#10;b_dis_volume = 0.0;&amp;#10;g_dis_volume = 0.0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="p_targetpos = [1, 1];&amp;#10;b_targetpos = [1, 1];&amp;#10;p_distractorpos = [1, 1];&amp;#10;b_distractorpos = [1, 1];&amp;#10;g_distractorpos = [1, 1];&amp;#10;h_fillerpos = [1, 1];&amp;#10;l_fillerpos = [1, 1];&amp;#10;y_fillerpos = [1, 1];&amp;#10;p_dis_volume = 0.0;&amp;#10;b_dis_volume = 0.0;&amp;#10;g_dis_volume = 0.0;&amp;#10;function FindTargetAndDistractor(allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral) {&amp;#10;    var tar, tarAndDist;&amp;#10;    tar = np.random.choice(targets);&amp;#10;    tarAndDist = new FindDistractor(tar, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral);&amp;#10;    return tarAndDist;&amp;#10;}&amp;#10;function FindDistractor(target, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral) {&amp;#10;    var dist;&amp;#10;    dist = np.random.choice(distractors);&amp;#10;    if ((((target === &quot;p&quot;) &amp;&amp; (dist === &quot;p&quot;)) &amp;&amp; (allowedPCongruence &gt; 0))) {&amp;#10;        allowedPCongruence = (allowedPCongruence - 1);&amp;#10;        psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Congruent&quot;);&amp;#10;        return [target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;    } else {&amp;#10;        if ((((target === &quot;p&quot;) &amp;&amp; (dist === &quot;b&quot;)) &amp;&amp; (allowedPIncongruence &gt; 0))) {&amp;#10;            allowedPIncongruence = (allowedPIncongruence - 1);&amp;#10;            psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Incongruent&quot;);&amp;#10;            return [target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;        } else {&amp;#10;            if ((((target === &quot;p&quot;) &amp;&amp; (dist === &quot;g&quot;)) &amp;&amp; (allowedPNeutral &gt; 0))) {&amp;#10;                allowedPNeutral = (allowedPNeutral - 1);&amp;#10;                psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Neutral&quot;);&amp;#10;                return [target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;            } else {&amp;#10;                if ((((target === &quot;b&quot;) &amp;&amp; (dist === &quot;p&quot;)) &amp;&amp; (allowedBIncongruence &gt; 0))) {&amp;#10;                    allowedBIncongruence = (allowedBIncongruence - 1);&amp;#10;                    psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Incongruent&quot;);&amp;#10;                    return [target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;                } else {&amp;#10;                    if ((((target === &quot;b&quot;) &amp;&amp; (dist === &quot;b&quot;)) &amp;&amp; (allowedBCongruence &gt; 0))) {&amp;#10;                        allowedBCongruence = (allowedBCongruence - 1);&amp;#10;                        psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Congruent&quot;);&amp;#10;                        return [target, dist, allowedPCongruence, allowedPIncongruenceA, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;                    } else {&amp;#10;                        if ((((target === &quot;b&quot;) &amp;&amp; (dist === &quot;g&quot;)) &amp;&amp; (allowedBNeutral &gt; 0))) {&amp;#10;                            allowedBNeutral = (allowedBNeutral - 1);&amp;#10;                            psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Neutral&quot;);&amp;#10;                            return [target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;                        } else {&amp;#10;                            return new FindDistractor(np.random.choice(targets), allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral);&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;targets = [&quot;p&quot;, &quot;b&quot;];&amp;#10;distractors = [&quot;p&quot;, &quot;b&quot;, &quot;g&quot;];&amp;#10;fillers = [&quot;h&quot;, &quot;l&quot;, &quot;y&quot;];&amp;#10;fillerposes = [&quot;upLeft&quot;, &quot;lowLeft&quot;, &quot;upRight&quot;, &quot;lowRight&quot;];&amp;#10;targetpos = [1, 1];&amp;#10;targetposName = np.random.choice(fillerposes);&amp;#10;if ((targetposName === &quot;upLeft&quot;)) {&amp;#10;    targetpos = filler_up_left_pos;&amp;#10;} else {&amp;#10;    if ((targetposName === &quot;lowLeft&quot;)) {&amp;#10;        targetpos = filler_low_left_pos;&amp;#10;    } else {&amp;#10;        if ((targetposName === &quot;upRight&quot;)) {&amp;#10;            targetpos = filler_up_right_pos;&amp;#10;        } else {&amp;#10;            if ((targetposName === &quot;lowRight&quot;)) {&amp;#10;                targetpos = filler_low_right_pos;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;fillerposes.remove(targetposName);&amp;#10;targetAndDistractor = new FindTargetAndDistractor(allowedPCongruenceAV, allowedPIncongruenceAV, allowedPNeutralAV, allowedBCongruenceAV, allowedBIncongruenceAV, allowedBNeutralAV);&amp;#10;target = targetAndDistractor[0];&amp;#10;distractor = targetAndDistractor[1];&amp;#10;allowedPCongruenceAV = targetAndDistractor[2];&amp;#10;allowedPIncongruenceAV = targetAndDistractor[3];&amp;#10;allowedPNeutralAV = targetAndDistractor[4];&amp;#10;allowedBCongruenceAV = targetAndDistractor[5];&amp;#10;allowedBIncongruenceAV = targetAndDistractor[6];&amp;#10;allowedBNeutralAV = targetAndDistractor[7];&amp;#10;targetletter = target;&amp;#10;if ((target === &quot;p&quot;)) {&amp;#10;    p_targetpos = targetpos;&amp;#10;} else {&amp;#10;    if ((target === &quot;b&quot;)) {&amp;#10;        b_targetpos = targetpos;&amp;#10;    }&amp;#10;}&amp;#10;if ((distractor === &quot;p&quot;)) {&amp;#10;    p_distractorpos = distractorPos;&amp;#10;    p_dis_volume = 1.0;&amp;#10;} else {&amp;#10;    if ((distractor === &quot;b&quot;)) {&amp;#10;        b_distractorpos = distractorPos;&amp;#10;        b_dis_volume = 1.0;&amp;#10;    } else {&amp;#10;        if ((distractor === &quot;g&quot;)) {&amp;#10;            g_distractorpos = distractorPos;&amp;#10;            g_dis_volume = 1.0;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;np.random.shuffle(fillerposes);&amp;#10;np.random.shuffle(fillers);&amp;#10;index = [0, 1, 2];&amp;#10;for (var i, _pj_c = 0, _pj_a = index, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    if (((fillerposes[i] === &quot;upLeft&quot;) &amp;&amp; (fillers[i] === &quot;h&quot;))) {&amp;#10;        h_fillerpos = filler_up_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;upLeft&quot;) &amp;&amp; (fillers[i] === &quot;l&quot;))) {&amp;#10;        l_fillerpos = filler_up_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;upLeft&quot;) &amp;&amp; (fillers[i] === &quot;y&quot;))) {&amp;#10;        y_fillerpos = filler_up_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowLeft&quot;) &amp;&amp; (fillers[i] === &quot;h&quot;))) {&amp;#10;        h_fillerpos = filler_low_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowLeft&quot;) &amp;&amp; (fillers[i] === &quot;l&quot;))) {&amp;#10;        l_fillerpos = filler_low_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowLeft&quot;) &amp;&amp; (fillers[i] === &quot;y&quot;))) {&amp;#10;        y_fillerpos = filler_low_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowRight&quot;) &amp;&amp; (fillers[i] === &quot;h&quot;))) {&amp;#10;        h_fillerpos = filler_low_right_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowRight&quot;) &amp;&amp; (fillers[i] === &quot;l&quot;))) {&amp;#10;        l_fillerpos = filler_low_right_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowRight&quot;) &amp;&amp; (fillers[i] === &quot;y&quot;))) {&amp;#10;        y_fillerpos = filler_low_right_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;upRight&quot;) &amp;&amp; (fillers[i] === &quot;h&quot;))) {&amp;#10;        h_fillerpos = filler_up_right_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;upRight&quot;) &amp;&amp; (fillers[i] === &quot;l&quot;))) {&amp;#10;        l_fillerpos = filler_up_right_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;upRight&quot;) &amp;&amp; (fillers[i] === &quot;y&quot;))) {&amp;#10;        y_fillerpos = filler_up_right_pos;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="p_targetpos = (1,1)&amp;#10;b_targetpos = (1,1)&amp;#10;p_distractorpos = (1,1)&amp;#10;b_distractorpos = (1,1)&amp;#10;g_distractorpos = (1,1)&amp;#10;h_fillerpos = (1,1)&amp;#10;l_fillerpos = (1,1)&amp;#10;y_fillerpos = (1,1)&amp;#10;p_dis_volume = 0.0&amp;#10;b_dis_volume = 0.0&amp;#10;g_dis_volume = 0.0&amp;#10;&amp;#10;def FindTargetAndDistractor(allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral):&amp;#10;    tar = np.random.choice(targets);&amp;#10;    tarAndDist = FindDistractor(tar, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral);&amp;#10;    return tarAndDist; &amp;#10;    &amp;#10;def FindDistractor(target, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral):&amp;#10;    &amp;#10;    dist = np.random.choice(distractors);&amp;#10;    if target == 'p' and dist == 'p' and allowedPCongruence &gt; 0:&amp;#10;        allowedPCongruence = allowedPCongruence -1; &amp;#10;        thisExp.addData('Condition', 'Congruent')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;&amp;#10;    elif target == 'p' and dist == 'b' and allowedPIncongruence &gt; 0:&amp;#10;        allowedPIncongruence = allowedPIncongruence -1; &amp;#10;        thisExp.addData('Condition', 'Incongruent')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;   &amp;#10;    elif target == 'p' and dist == 'g' and allowedPNeutral &gt; 0:&amp;#10;        allowedPNeutral = allowedPNeutral -1; &amp;#10;        thisExp.addData('Condition', 'Neutral')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;&amp;#10;    elif target == 'b' and dist == 'p' and allowedBIncongruence &gt; 0:&amp;#10;        allowedBIncongruence = allowedBIncongruence -1; &amp;#10;        thisExp.addData('Condition', 'Incongruent')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;&amp;#10;    elif target == 'b' and dist == 'b' and allowedBCongruence &gt; 0:&amp;#10;        allowedBCongruence = allowedBCongruence -1; &amp;#10;        thisExp.addData('Condition', 'Congruent')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruenceA, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;   &amp;#10;    elif target == 'b' and dist == 'g' and allowedBNeutral &gt; 0:&amp;#10;        allowedBNeutral = allowedBNeutral -1; &amp;#10;        thisExp.addData('Condition', 'Neutral')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;&amp;#10;    else: &amp;#10;       return FindDistractor(np.random.choice(targets), allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral);&amp;#10;   &amp;#10;# setup variables to control the experiment&amp;#10;targets = ['p','b'];&amp;#10;distractors = ['p','b','g'];&amp;#10;fillers = ['h','l','y'];&amp;#10;fillerposes = ['upLeft', 'lowLeft', 'upRight', 'lowRight'];&amp;#10;targetpos = (1,1);&amp;#10;&amp;#10;# Setup scene&amp;#10;# Find the target position &amp;#10;targetposName = np.random.choice(fillerposes)&amp;#10;if targetposName == 'upLeft':&amp;#10;    targetpos = filler_up_left_pos;&amp;#10;elif targetposName == 'lowLeft':&amp;#10;    targetpos = filler_low_left_pos;&amp;#10;elif targetposName == 'upRight':&amp;#10;    targetpos = filler_up_right_pos;&amp;#10;elif targetposName == 'lowRight':&amp;#10;    targetpos = filler_low_right_pos;       &amp;#10;fillerposes.remove(targetposName);&amp;#10;# find which will be the target and which will be the distractor&amp;#10;targetAndDistractor = FindTargetAndDistractor(allowedPCongruenceAV, allowedPIncongruenceAV, allowedPNeutralAV, allowedBCongruenceAV, allowedBIncongruenceAV, allowedBNeutralAV)&amp;#10;&amp;#10;target = targetAndDistractor[0];&amp;#10;distractor = targetAndDistractor[1];&amp;#10;&amp;#10;allowedPCongruenceAV = targetAndDistractor[2]&amp;#10;allowedPIncongruenceAV = targetAndDistractor[3]&amp;#10;allowedPNeutralAV = targetAndDistractor[4]&amp;#10;allowedBCongruenceAV = targetAndDistractor[5]&amp;#10;allowedBIncongruenceAV = targetAndDistractor[6]&amp;#10;allowedBNeutralAV = targetAndDistractor[7]&amp;#10;&amp;#10;targetletter = target; &amp;#10;&amp;#10;if target == 'p':&amp;#10;    p_targetpos = targetpos&amp;#10;elif target == 'b':&amp;#10;    b_targetpos = targetpos&amp;#10;&amp;#10;if distractor == 'p':&amp;#10;    p_distractorpos = distractorPos&amp;#10;    p_dis_volume = 1.0&amp;#10;elif distractor == 'b':&amp;#10;    b_distractorpos = distractorPos&amp;#10;    b_dis_volume = 1.0&amp;#10;elif distractor == 'g':&amp;#10;    g_distractorpos = distractorPos&amp;#10;    g_dis_volume = 1.0&amp;#10;# Randomly place the fillers &amp;#10;&amp;#10;np.random.shuffle(fillerposes);&amp;#10;np.random.shuffle(fillers);&amp;#10;index = (0,1,2)&amp;#10;&amp;#10;for i in index:&amp;#10;        if fillerposes[i] == 'upLeft' and fillers[i] == 'h':&amp;#10;            h_fillerpos = filler_up_left_pos;&amp;#10;        if fillerposes[i] == 'upLeft' and fillers[i] == 'l':&amp;#10;            l_fillerpos = filler_up_left_pos;&amp;#10;        if fillerposes[i] == 'upLeft' and fillers[i] == 'y':&amp;#10;            y_fillerpos = filler_up_left_pos;&amp;#10;            &amp;#10;        if fillerposes[i] == 'lowLeft' and fillers[i] == 'h':&amp;#10;            h_fillerpos = filler_low_left_pos;&amp;#10;        if fillerposes[i] == 'lowLeft' and fillers[i] == 'l':&amp;#10;            l_fillerpos = filler_low_left_pos;&amp;#10;        if fillerposes[i] == 'lowLeft' and fillers[i] == 'y':&amp;#10;            y_fillerpos = filler_low_left_pos;&amp;#10;            &amp;#10;        if fillerposes[i] == 'lowRight' and fillers[i] == 'h':&amp;#10;            h_fillerpos = filler_low_right_pos;&amp;#10;        if fillerposes[i] == 'lowRight' and fillers[i] == 'l':&amp;#10;            l_fillerpos = filler_low_right_pos;&amp;#10;        if fillerposes[i] == 'lowRight' and fillers[i] == 'y':&amp;#10;            y_fillerpos = filler_low_right_pos;&amp;#10;            &amp;#10;        if fillerposes[i] == 'upRight' and fillers[i] == 'h':&amp;#10;            h_fillerpos = filler_up_right_pos;&amp;#10;        if fillerposes[i] == 'upRight' and fillers[i] == 'l':&amp;#10;            l_fillerpos = filler_up_right_pos;&amp;#10;        if fillerposes[i] == 'upRight' and fillers[i] == 'y':&amp;#10;            y_fillerpos = filler_up_right_pos;&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="TrialController" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="p_Target">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="p_Target" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="p_targetpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="p" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="b_Target">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="b_Target" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="b_targetpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="b" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="p_Distractor">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="p_Distractor" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="p_distractorpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="p" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="b_Distractor">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="b_Distractor" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="b_distractorpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="b" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="g_Distractor">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="g_Distractor" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="g_distractorpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="g" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="h_Filler">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="h_Filler" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="h_fillerpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="h" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="l_Filler">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="l_Filler" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="l_fillerpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="l" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="y_filler">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="y_filler" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="y_fillerpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="y" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <SoundComponent name="p_Dis_Sound">
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="hamming"/>
        <Param val="p_Dis_Sound" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="audio/p.wav" valType="str" updates="constant" name="sound"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
        <Param val="p_dis_volume" valType="num" updates="set every repeat" name="volume"/>
      </SoundComponent>
      <SoundComponent name="b_Dis_Sound">
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="hamming"/>
        <Param val="b_Dis_Sound" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="audio/b.wav" valType="str" updates="constant" name="sound"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
        <Param val="b_dis_volume" valType="num" updates="set every repeat" name="volume"/>
      </SoundComponent>
      <SoundComponent name="g_Dis_Sound">
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="hamming"/>
        <Param val="g_Dis_Sound" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="audio/g.wav" valType="str" updates="constant" name="sound"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
        <Param val="g_dis_volume" valType="num" updates="set every repeat" name="volume"/>
      </SoundComponent>
      <CodeComponent name="recordAttentionReaction">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="enableHappyface = false;&amp;#10;enableSadface = false;&amp;#10;enableFaster = false;&amp;#10;if ((targetletter === &quot;p&quot;)) {&amp;#10;    isItP = true;&amp;#10;    isItB = false;&amp;#10;}&amp;#10;if ((targetletter === &quot;b&quot;)) {&amp;#10;    isItB = true;&amp;#10;    isItP = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="enableHappyface = False;&amp;#10;enableSadface = False;&amp;#10;enableFaster = False;&amp;#10;&amp;#10;if targetletter == 'p':&amp;#10;    isItP = True;&amp;#10;    isItB = False; &amp;#10;    &amp;#10;if targetletter == 'b':&amp;#10;    isItB = True;&amp;#10;    isItP = False; " valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#button[0] = left click = P &amp;#10;#button[2] = right click = B&amp;#10;&amp;#10;buttons = mouse.getPressed()&amp;#10;&amp;#10;if isItP and buttons[0] == 1:&amp;#10;    enableHappyface = True;&amp;#10;    enableSadface = False;&amp;#10;    enableFaster = False; &amp;#10;elif isItB and buttons[2] == 1:&amp;#10;    enableHappyface = True;&amp;#10;    enableSadface = False;&amp;#10;    enableFaster = False;&amp;#10;elif isItP and buttons[2] == 1:&amp;#10;    enableHappyface = False;&amp;#10;    enableSadface = True;&amp;#10;    enableFaster = False;  &amp;#10;elif isItB and buttons[0] == 1:&amp;#10;    enableHappyface = False;&amp;#10;    enableSadface = True;&amp;#10;    enableFaster = False; " valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="buttons = mouse.getPressed();&amp;#10;if ((isItP &amp;&amp; (buttons[0] === 1))) {&amp;#10;    enableHappyface = true;&amp;#10;    enableSadface = false;&amp;#10;    enableFaster = false;&amp;#10;} else {&amp;#10;    if ((isItB &amp;&amp; (buttons[2] === 1))) {&amp;#10;        enableHappyface = true;&amp;#10;        enableSadface = false;&amp;#10;        enableFaster = false;&amp;#10;    } else {&amp;#10;        if ((isItP &amp;&amp; (buttons[2] === 1))) {&amp;#10;            enableHappyface = false;&amp;#10;            enableSadface = true;&amp;#10;            enableFaster = false;&amp;#10;        } else {&amp;#10;            if ((isItB &amp;&amp; (buttons[0] === 1))) {&amp;#10;                enableHappyface = false;&amp;#10;                enableSadface = true;&amp;#10;                enableFaster = false;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (((enableHappyface === false) &amp;&amp; (enableSadface === false))) {&amp;#10;    enableFaster = true;&amp;#10;}&amp;#10;if ((enableHappyface === true)) {&amp;#10;    psychoJS.experiment.addData(&quot;Response&quot;, &quot;Correct&quot;);&amp;#10;    psychoJS.experiment.addData(&quot;Response_code&quot;, 1.0);&amp;#10;}&amp;#10;if ((enableSadface === true)) {&amp;#10;    psychoJS.experiment.addData(&quot;Response&quot;, &quot;Incorrect&quot;);&amp;#10;    psychoJS.experiment.addData(&quot;Response_code&quot;, 2.0);&amp;#10;}&amp;#10;if ((enableFaster === true)) {&amp;#10;    psychoJS.experiment.addData(&quot;Response&quot;, &quot;None&quot;);&amp;#10;    psychoJS.experiment.addData(&quot;Response_code&quot;, 0.0);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if enableHappyface == False and enableSadface == False:&amp;#10;    enableFaster = True; &amp;#10;    &amp;#10;if enableHappyface == True:   &amp;#10;    thisExp.addData('Response', 'Correct')&amp;#10;    thisExp.addData('Response_code', 1.0)&amp;#10;    &amp;#10;if enableSadface == True:   &amp;#10;    thisExp.addData('Response', 'Incorrect')&amp;#10;    thisExp.addData('Response_code', 2.0)&amp;#10;    &amp;#10;if enableFaster == True:   &amp;#10;    thisExp.addData('Response', 'None')&amp;#10;    thisExp.addData('Response_code', 0.0)&amp;#10;    &amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="recordAttentionReaction" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouse">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="any click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <ImageComponent name="whiteimage">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="1.0000, 1.0000, 1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="graphic/black.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="whiteimage" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="VisualDistractorStimuli">
      <CodeComponent name="VisualTrialController">
        <Param val="import numpy as np&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import * as np from 'numpy';&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# setup variables to control the experiment&amp;#10;distractorPos = (0.0,0.3)&amp;#10;filler_up_left_pos = (-0.15,0.1)&amp;#10;filler_low_left_pos = (-0.15,-0.1)&amp;#10;filler_low_right_pos = (0.15,-0.1)&amp;#10;filler_up_right_pos = (0.15,0.1)&amp;#10;allowedBNeutral = 2; &amp;#10;allowedBIncongruence = 2; &amp;#10;allowedBCongruence = 2;&amp;#10;allowedPNeutral = 2; &amp;#10;allowedPIncongruence = 2; &amp;#10;allowedPCongruence = 2; &amp;#10;targetletter = 'g';&amp;#10;&amp;#10;&amp;#10;#Default positions&amp;#10;p_targetpos = (1,1)&amp;#10;b_targetpos = (1,1)&amp;#10;p_distractorpos = (1,1)&amp;#10;b_distractorpos = (1,1)&amp;#10;g_distractorpos = (1,1)&amp;#10;h_fillerpos = (1,1)&amp;#10;l_fillerpos = (1,1)&amp;#10;y_fillerpos = (1,1)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="distractorPos = [0.0, 0.3];&amp;#10;filler_up_left_pos = [(- 0.15), 0.1];&amp;#10;filler_low_left_pos = [(- 0.15), (- 0.1)];&amp;#10;filler_low_right_pos = [0.15, (- 0.1)];&amp;#10;filler_up_right_pos = [0.15, 0.1];&amp;#10;allowedBNeutral = 2;&amp;#10;allowedBIncongruence = 2;&amp;#10;allowedBCongruence = 2;&amp;#10;allowedPNeutral = 2;&amp;#10;allowedPIncongruence = 2;&amp;#10;allowedPCongruence = 2;&amp;#10;targetletter = &quot;g&quot;;&amp;#10;p_targetpos = [1, 1];&amp;#10;b_targetpos = [1, 1];&amp;#10;p_distractorpos = [1, 1];&amp;#10;b_distractorpos = [1, 1];&amp;#10;g_distractorpos = [1, 1];&amp;#10;h_fillerpos = [1, 1];&amp;#10;l_fillerpos = [1, 1];&amp;#10;y_fillerpos = [1, 1];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="p_targetpos = [1, 1];&amp;#10;b_targetpos = [1, 1];&amp;#10;p_distractorpos = [1, 1];&amp;#10;b_distractorpos = [1, 1];&amp;#10;g_distractorpos = [1, 1];&amp;#10;h_fillerpos = [1, 1];&amp;#10;l_fillerpos = [1, 1];&amp;#10;y_fillerpos = [1, 1];&amp;#10;p_dis_volume = 0.0;&amp;#10;b_dis_volume = 0.0;&amp;#10;g_dis_volume = 0.0;&amp;#10;function FindTargetAndDistractor(allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral) {&amp;#10;    var tar, tarAndDist;&amp;#10;    tar = np.random.choice(targets);&amp;#10;    tarAndDist = new FindDistractor(tar, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral);&amp;#10;    return tarAndDist;&amp;#10;}&amp;#10;function FindDistractor(target, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral) {&amp;#10;    var dist;&amp;#10;    dist = np.random.choice(distractors);&amp;#10;    if ((((target === &quot;p&quot;) &amp;&amp; (dist === &quot;p&quot;)) &amp;&amp; (allowedPCongruence &gt; 0))) {&amp;#10;        allowedPCongruence = (allowedPCongruence - 1);&amp;#10;        psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Congruent&quot;);&amp;#10;        return [target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;    } else {&amp;#10;        if ((((target === &quot;p&quot;) &amp;&amp; (dist === &quot;b&quot;)) &amp;&amp; (allowedPIncongruence &gt; 0))) {&amp;#10;            allowedPIncongruence = (allowedPIncongruence - 1);&amp;#10;            psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Incongruent&quot;);&amp;#10;            return [target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;        } else {&amp;#10;            if ((((target === &quot;p&quot;) &amp;&amp; (dist === &quot;g&quot;)) &amp;&amp; (allowedPNeutral &gt; 0))) {&amp;#10;                allowedPNeutral = (allowedPNeutral - 1);&amp;#10;                psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Neutral&quot;);&amp;#10;                return [target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;            } else {&amp;#10;                if ((((target === &quot;b&quot;) &amp;&amp; (dist === &quot;p&quot;)) &amp;&amp; (allowedBIncongruence &gt; 0))) {&amp;#10;                    allowedBIncongruence = (allowedBIncongruence - 1);&amp;#10;                    psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Incongruent&quot;);&amp;#10;                    return [target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;                } else {&amp;#10;                    if ((((target === &quot;b&quot;) &amp;&amp; (dist === &quot;b&quot;)) &amp;&amp; (allowedBCongruence &gt; 0))) {&amp;#10;                        allowedBCongruence = (allowedBCongruence - 1);&amp;#10;                        psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Congruent&quot;);&amp;#10;                        return [target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;                    } else {&amp;#10;                        if ((((target === &quot;b&quot;) &amp;&amp; (dist === &quot;g&quot;)) &amp;&amp; (allowedBNeutral &gt; 0))) {&amp;#10;                            allowedBNeutral = (allowedBNeutral - 1);&amp;#10;                            psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Neutral&quot;);&amp;#10;                            return [target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;                        } else {&amp;#10;                            return new FindDistractor(np.random.choice(targets), allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral);&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;targets = [&quot;p&quot;, &quot;b&quot;];&amp;#10;distractors = [&quot;p&quot;, &quot;b&quot;, &quot;g&quot;];&amp;#10;fillers = [&quot;h&quot;, &quot;l&quot;, &quot;y&quot;];&amp;#10;fillerposes = [&quot;upLeft&quot;, &quot;lowLeft&quot;, &quot;upRight&quot;, &quot;lowRight&quot;];&amp;#10;targetpos = [1, 1];&amp;#10;targetposName = np.random.choice(fillerposes);&amp;#10;if ((targetposName === &quot;upLeft&quot;)) {&amp;#10;    targetpos = filler_up_left_pos;&amp;#10;} else {&amp;#10;    if ((targetposName === &quot;lowLeft&quot;)) {&amp;#10;        targetpos = filler_low_left_pos;&amp;#10;    } else {&amp;#10;        if ((targetposName === &quot;upRight&quot;)) {&amp;#10;            targetpos = filler_up_right_pos;&amp;#10;        } else {&amp;#10;            if ((targetposName === &quot;lowRight&quot;)) {&amp;#10;                targetpos = filler_low_right_pos;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;fillerposes.remove(targetposName);&amp;#10;targetAndDistractor = new FindTargetAndDistractor(allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral);&amp;#10;target = targetAndDistractor[0];&amp;#10;distractor = targetAndDistractor[1];&amp;#10;allowedPCongruence = targetAndDistractor[2];&amp;#10;allowedPIncongruence = targetAndDistractor[3];&amp;#10;allowedPNeutral = targetAndDistractor[4];&amp;#10;allowedBCongruence = targetAndDistractor[5];&amp;#10;allowedBIncongruence = targetAndDistractor[6];&amp;#10;allowedBNeutral = targetAndDistractor[7];&amp;#10;targetletter = target;&amp;#10;if ((target === &quot;p&quot;)) {&amp;#10;    p_targetpos = targetpos;&amp;#10;} else {&amp;#10;    if ((target === &quot;b&quot;)) {&amp;#10;        b_targetpos = targetpos;&amp;#10;    }&amp;#10;}&amp;#10;if ((distractor === &quot;p&quot;)) {&amp;#10;    p_distractorpos = distractorPos;&amp;#10;} else {&amp;#10;    if ((distractor === &quot;b&quot;)) {&amp;#10;        b_distractorpos = distractorPos;&amp;#10;    } else {&amp;#10;        if ((distractor === &quot;g&quot;)) {&amp;#10;            g_distractorpos = distractorPos;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;np.random.shuffle(fillerposes);&amp;#10;np.random.shuffle(fillers);&amp;#10;index = [0, 1, 2];&amp;#10;for (var i, _pj_c = 0, _pj_a = index, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    if (((fillerposes[i] === &quot;upLeft&quot;) &amp;&amp; (fillers[i] === &quot;h&quot;))) {&amp;#10;        h_fillerpos = filler_up_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;upLeft&quot;) &amp;&amp; (fillers[i] === &quot;l&quot;))) {&amp;#10;        l_fillerpos = filler_up_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;upLeft&quot;) &amp;&amp; (fillers[i] === &quot;y&quot;))) {&amp;#10;        y_fillerpos = filler_up_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowLeft&quot;) &amp;&amp; (fillers[i] === &quot;h&quot;))) {&amp;#10;        h_fillerpos = filler_low_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowLeft&quot;) &amp;&amp; (fillers[i] === &quot;l&quot;))) {&amp;#10;        l_fillerpos = filler_low_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowLeft&quot;) &amp;&amp; (fillers[i] === &quot;y&quot;))) {&amp;#10;        y_fillerpos = filler_low_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowRight&quot;) &amp;&amp; (fillers[i] === &quot;h&quot;))) {&amp;#10;        h_fillerpos = filler_low_right_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowRight&quot;) &amp;&amp; (fillers[i] === &quot;l&quot;))) {&amp;#10;        l_fillerpos = filler_low_right_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowRight&quot;) &amp;&amp; (fillers[i] === &quot;y&quot;))) {&amp;#10;        y_fillerpos = filler_low_right_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;upRight&quot;) &amp;&amp; (fillers[i] === &quot;h&quot;))) {&amp;#10;        h_fillerpos = filler_up_right_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;upRight&quot;) &amp;&amp; (fillers[i] === &quot;l&quot;))) {&amp;#10;        l_fillerpos = filler_up_right_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;upRight&quot;) &amp;&amp; (fillers[i] === &quot;y&quot;))) {&amp;#10;        y_fillerpos = filler_up_right_pos;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="p_targetpos = (1,1)&amp;#10;b_targetpos = (1,1)&amp;#10;p_distractorpos = (1,1)&amp;#10;b_distractorpos = (1,1)&amp;#10;g_distractorpos = (1,1)&amp;#10;h_fillerpos = (1,1)&amp;#10;l_fillerpos = (1,1)&amp;#10;y_fillerpos = (1,1)&amp;#10;p_dis_volume = 0.0&amp;#10;b_dis_volume = 0.0&amp;#10;g_dis_volume = 0.0&amp;#10;&amp;#10;def FindTargetAndDistractor(allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral):&amp;#10;    tar = np.random.choice(targets);&amp;#10;    tarAndDist = FindDistractor(tar, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral);&amp;#10;    return tarAndDist; &amp;#10;    &amp;#10;def FindDistractor(target, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral):&amp;#10;    &amp;#10;    dist = np.random.choice(distractors);&amp;#10;    if target == 'p' and dist == 'p' and allowedPCongruence &gt; 0:&amp;#10;        allowedPCongruence = allowedPCongruence -1; &amp;#10;        thisExp.addData('Condition', 'Congruent')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;&amp;#10;    elif target == 'p' and dist == 'b' and allowedPIncongruence &gt; 0:&amp;#10;        allowedPIncongruence = allowedPIncongruence -1; &amp;#10;        thisExp.addData('Condition', 'Incongruent')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;   &amp;#10;    elif target == 'p' and dist == 'g' and allowedPNeutral &gt; 0:&amp;#10;        allowedPNeutral = allowedPNeutral -1; &amp;#10;        thisExp.addData('Condition', 'Neutral')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;&amp;#10;    elif target == 'b' and dist == 'p' and allowedBIncongruence &gt; 0:&amp;#10;        allowedBIncongruence = allowedBIncongruence -1; &amp;#10;        thisExp.addData('Condition', 'Incongruent')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;&amp;#10;    elif target == 'b' and dist == 'b' and allowedBCongruence &gt; 0:&amp;#10;        allowedBCongruence = allowedBCongruence -1; &amp;#10;        thisExp.addData('Condition', 'Congruent')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;   &amp;#10;    elif target == 'b' and dist == 'g' and allowedBNeutral &gt; 0:&amp;#10;        allowedBNeutral = allowedBNeutral -1; &amp;#10;        thisExp.addData('Condition', 'Neutral')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;&amp;#10;    else: &amp;#10;       return FindDistractor(np.random.choice(targets), allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral);&amp;#10;   &amp;#10;# setup variables to control the experiment&amp;#10;targets = ['p','b'];&amp;#10;distractors = ['p','b','g'];&amp;#10;fillers = ['h','l','y'];&amp;#10;fillerposes = ['upLeft', 'lowLeft', 'upRight', 'lowRight'];&amp;#10;targetpos = (1,1);&amp;#10;&amp;#10;# Setup scene&amp;#10;# Find the target position &amp;#10;targetposName = np.random.choice(fillerposes)&amp;#10;if targetposName == 'upLeft':&amp;#10;    targetpos = filler_up_left_pos;&amp;#10;elif targetposName == 'lowLeft':&amp;#10;    targetpos = filler_low_left_pos;&amp;#10;elif targetposName == 'upRight':&amp;#10;    targetpos = filler_up_right_pos;&amp;#10;elif targetposName == 'lowRight':&amp;#10;    targetpos = filler_low_right_pos;       &amp;#10;fillerposes.remove(targetposName);&amp;#10;# find which will be the target and which will be the distractor&amp;#10;targetAndDistractor = FindTargetAndDistractor(allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral)&amp;#10;&amp;#10;target = targetAndDistractor[0];&amp;#10;distractor = targetAndDistractor[1];&amp;#10;&amp;#10;allowedPCongruence = targetAndDistractor[2]&amp;#10;allowedPIncongruence = targetAndDistractor[3]&amp;#10;allowedPNeutral = targetAndDistractor[4]&amp;#10;allowedBCongruence = targetAndDistractor[5]&amp;#10;allowedBIncongruence = targetAndDistractor[6]&amp;#10;allowedBNeutral = targetAndDistractor[7]&amp;#10;&amp;#10;targetletter = target; &amp;#10;&amp;#10;if target == 'p':&amp;#10;    p_targetpos = targetpos&amp;#10;elif target == 'b':&amp;#10;    b_targetpos = targetpos&amp;#10;&amp;#10;if distractor == 'p':&amp;#10;    p_distractorpos = distractorPos&amp;#10;elif distractor == 'b':&amp;#10;    b_distractorpos = distractorPos&amp;#10;elif distractor == 'g':&amp;#10;    g_distractorpos = distractorPos&amp;#10;# Randomly place the fillers &amp;#10;&amp;#10;np.random.shuffle(fillerposes);&amp;#10;np.random.shuffle(fillers);&amp;#10;index = (0,1,2)&amp;#10;&amp;#10;for i in index:&amp;#10;        if fillerposes[i] == 'upLeft' and fillers[i] == 'h':&amp;#10;            h_fillerpos = filler_up_left_pos;&amp;#10;        if fillerposes[i] == 'upLeft' and fillers[i] == 'l':&amp;#10;            l_fillerpos = filler_up_left_pos;&amp;#10;        if fillerposes[i] == 'upLeft' and fillers[i] == 'y':&amp;#10;            y_fillerpos = filler_up_left_pos;&amp;#10;            &amp;#10;        if fillerposes[i] == 'lowLeft' and fillers[i] == 'h':&amp;#10;            h_fillerpos = filler_low_left_pos;&amp;#10;        if fillerposes[i] == 'lowLeft' and fillers[i] == 'l':&amp;#10;            l_fillerpos = filler_low_left_pos;&amp;#10;        if fillerposes[i] == 'lowLeft' and fillers[i] == 'y':&amp;#10;            y_fillerpos = filler_low_left_pos;&amp;#10;            &amp;#10;        if fillerposes[i] == 'lowRight' and fillers[i] == 'h':&amp;#10;            h_fillerpos = filler_low_right_pos;&amp;#10;        if fillerposes[i] == 'lowRight' and fillers[i] == 'l':&amp;#10;            l_fillerpos = filler_low_right_pos;&amp;#10;        if fillerposes[i] == 'lowRight' and fillers[i] == 'y':&amp;#10;            y_fillerpos = filler_low_right_pos;&amp;#10;            &amp;#10;        if fillerposes[i] == 'upRight' and fillers[i] == 'h':&amp;#10;            h_fillerpos = filler_up_right_pos;&amp;#10;        if fillerposes[i] == 'upRight' and fillers[i] == 'l':&amp;#10;            l_fillerpos = filler_up_right_pos;&amp;#10;        if fillerposes[i] == 'upRight' and fillers[i] == 'y':&amp;#10;            y_fillerpos = filler_up_right_pos;&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="VisualTrialController" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="p_Target_2">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="p_Target_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="p_targetpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="p" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="b_Target_2">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="b_Target_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="b_targetpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="b" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="p_Distractor_2">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="p_Distractor_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="p_distractorpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="p" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="b_Distractor_2">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="b_Distractor_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="b_distractorpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="b" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="g_Distractor_2">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="g_Distractor_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="g_distractorpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="g" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="h_Filler_2">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="h_Filler_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="h_fillerpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="h" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="l_Filler_2">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="l_Filler_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="l_fillerpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="l" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="y_filler_2">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="y_filler_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="y_fillerpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="y" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="recordAttentionReaction_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="isItP = False;&amp;#10;isItB = False;&amp;#10;enableSadface = False;&amp;#10;enableHappyface = False;&amp;#10;enableFaster = False;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="isItP = false;&amp;#10;isItB = false;&amp;#10;enableSadface = false;&amp;#10;enableHappyface = false;&amp;#10;enableFaster = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="enableHappyface = false;&amp;#10;enableSadface = false;&amp;#10;enableFaster = false;&amp;#10;if ((targetletter === &quot;p&quot;)) {&amp;#10;    isItP = true;&amp;#10;    isItB = false;&amp;#10;}&amp;#10;if ((targetletter === &quot;b&quot;)) {&amp;#10;    isItB = true;&amp;#10;    isItP = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="enableHappyface = False;&amp;#10;enableSadface = False;&amp;#10;enableFaster = False;&amp;#10;&amp;#10;if targetletter == 'p':&amp;#10;    isItP = True;&amp;#10;    isItB = False; &amp;#10;    &amp;#10;if targetletter == 'b':&amp;#10;    isItB = True;&amp;#10;    isItP = False; " valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#button[0] = left click = P &amp;#10;#button[2] = right click = B&amp;#10;&amp;#10;buttons = mouse.getPressed()&amp;#10;&amp;#10;if isItP and buttons[0] == 1:&amp;#10;    enableHappyface = True;&amp;#10;    enableSadface = False;&amp;#10;    enableFaster = False; &amp;#10;elif isItB and buttons[2] == 1:&amp;#10;    enableHappyface = True;&amp;#10;    enableSadface = False;&amp;#10;    enableFaster = False;&amp;#10;elif isItP and buttons[2] == 1:&amp;#10;    enableHappyface = False;&amp;#10;    enableSadface = True;&amp;#10;    enableFaster = False;  &amp;#10;elif isItB and buttons[0] == 1:&amp;#10;    enableHappyface = False;&amp;#10;    enableSadface = True;&amp;#10;    enableFaster = False; " valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="buttons = mouse.getPressed();&amp;#10;if ((isItP &amp;&amp; (buttons[0] === 1))) {&amp;#10;    enableHappyface = true;&amp;#10;    enableSadface = false;&amp;#10;    enableFaster = false;&amp;#10;} else {&amp;#10;    if ((isItB &amp;&amp; (buttons[2] === 1))) {&amp;#10;        enableHappyface = true;&amp;#10;        enableSadface = false;&amp;#10;        enableFaster = false;&amp;#10;    } else {&amp;#10;        if ((isItP &amp;&amp; (buttons[2] === 1))) {&amp;#10;            enableHappyface = false;&amp;#10;            enableSadface = true;&amp;#10;            enableFaster = false;&amp;#10;        } else {&amp;#10;            if ((isItB &amp;&amp; (buttons[0] === 1))) {&amp;#10;                enableHappyface = false;&amp;#10;                enableSadface = true;&amp;#10;                enableFaster = false;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (((enableHappyface === false) &amp;&amp; (enableSadface === false))) {&amp;#10;    enableFaster = true;&amp;#10;}&amp;#10;if ((enableHappyface === true)) {&amp;#10;    psychoJS.experiment.addData(&quot;Response&quot;, &quot;Correct&quot;);&amp;#10;    psychoJS.experiment.addData(&quot;Response_code&quot;, 1.0);&amp;#10;}&amp;#10;if ((enableSadface === true)) {&amp;#10;    psychoJS.experiment.addData(&quot;Response&quot;, &quot;Incorrect&quot;);&amp;#10;    psychoJS.experiment.addData(&quot;Response_code&quot;, 2.0);&amp;#10;}&amp;#10;if ((enableFaster === true)) {&amp;#10;    psychoJS.experiment.addData(&quot;Response&quot;, &quot;None&quot;);&amp;#10;    psychoJS.experiment.addData(&quot;Response_code&quot;, 0.0);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if enableHappyface == False and enableSadface == False:&amp;#10;    enableFaster = True; &amp;#10;    &amp;#10;if enableHappyface == True:   &amp;#10;    thisExp.addData('Response', 'Correct')&amp;#10;    thisExp.addData('Response_code', 1.0)&amp;#10;    &amp;#10;if enableSadface == True:   &amp;#10;    thisExp.addData('Response', 'Incorrect')&amp;#10;    thisExp.addData('Response_code', 2.0)&amp;#10;    &amp;#10;if enableFaster == True:   &amp;#10;    thisExp.addData('Response', 'None')&amp;#10;    thisExp.addData('Response_code', 0.0)&amp;#10;    &amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="recordAttentionReaction_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouse_2">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="any click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <ImageComponent name="whiteimage_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="1.0000, 1.0000, 1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="graphic/black.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="whiteimage_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="AudioDistractorStimuli">
      <CodeComponent name="AudioController">
        <Param val="&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="allowedBNeutralA = 2; &amp;#10;allowedBIncongruenceA = 2; &amp;#10;allowedBCongruenceA = 2;&amp;#10;allowedPNeutralA = 2; &amp;#10;allowedPIncongruenceA = 2; &amp;#10;allowedPCongruenceA = 2; &amp;#10;&amp;#10;&amp;#10;#Default Distractor Volume &amp;#10;p_dis_volume = 0.0&amp;#10;b_dis_volume = 0.0&amp;#10;g_dis_volume = 0.0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="allowedBNeutralA = 2;&amp;#10;allowedBIncongruenceA = 2;&amp;#10;allowedBCongruenceA = 2;&amp;#10;allowedPNeutralA = 2;&amp;#10;allowedPIncongruenceA = 2;&amp;#10;allowedPCongruenceA = 2;&amp;#10;p_dis_volume = 0.0;&amp;#10;b_dis_volume = 0.0;&amp;#10;g_dis_volume = 0.0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="p_targetpos = [1, 1];&amp;#10;b_targetpos = [1, 1];&amp;#10;h_fillerpos = [1, 1];&amp;#10;l_fillerpos = [1, 1];&amp;#10;y_fillerpos = [1, 1];&amp;#10;p_dis_volume = 0.0;&amp;#10;b_dis_volume = 0.0;&amp;#10;g_dis_volume = 0.0;&amp;#10;function FindTargetAndDistractor(allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral) {&amp;#10;    var tar, tarAndDist;&amp;#10;    tar = np.random.choice(targets);&amp;#10;    tarAndDist = new FindDistractor(tar, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral);&amp;#10;    return tarAndDist;&amp;#10;}&amp;#10;function FindDistractor(target, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral) {&amp;#10;    var dist;&amp;#10;    dist = np.random.choice(distractors);&amp;#10;    if ((((target === &quot;p&quot;) &amp;&amp; (dist === &quot;p&quot;)) &amp;&amp; (allowedPCongruence &gt; 0))) {&amp;#10;        allowedPCongruence = (allowedPCongruence - 1);&amp;#10;        psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Congruent&quot;);&amp;#10;        return [target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;    } else {&amp;#10;        if ((((target === &quot;p&quot;) &amp;&amp; (dist === &quot;b&quot;)) &amp;&amp; (allowedPIncongruence &gt; 0))) {&amp;#10;            allowedPIncongruence = (allowedPIncongruence - 1);&amp;#10;            psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Incongruent&quot;);&amp;#10;            return [target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;        } else {&amp;#10;            if ((((target === &quot;p&quot;) &amp;&amp; (dist === &quot;g&quot;)) &amp;&amp; (allowedPNeutral &gt; 0))) {&amp;#10;                allowedPNeutral = (allowedPNeutral - 1);&amp;#10;                psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Neutral&quot;);&amp;#10;                return [target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;            } else {&amp;#10;                if ((((target === &quot;b&quot;) &amp;&amp; (dist === &quot;p&quot;)) &amp;&amp; (allowedBIncongruence &gt; 0))) {&amp;#10;                    allowedBIncongruence = (allowedBIncongruence - 1);&amp;#10;                    psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Incongruent&quot;);&amp;#10;                    return [target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;                } else {&amp;#10;                    if ((((target === &quot;b&quot;) &amp;&amp; (dist === &quot;b&quot;)) &amp;&amp; (allowedBCongruence &gt; 0))) {&amp;#10;                        allowedBCongruence = (allowedBCongruence - 1);&amp;#10;                        psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Congruent&quot;);&amp;#10;                        return [target, dist, allowedPCongruence, allowedPIncongruenceA, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;                    } else {&amp;#10;                        if ((((target === &quot;b&quot;) &amp;&amp; (dist === &quot;g&quot;)) &amp;&amp; (allowedBNeutral &gt; 0))) {&amp;#10;                            allowedBNeutral = (allowedBNeutral - 1);&amp;#10;                            psychoJS.experiment.addData(&quot;Condition&quot;, &quot;Neutral&quot;);&amp;#10;                            return [target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral];&amp;#10;                        } else {&amp;#10;                            return new FindDistractor(np.random.choice(targets), allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral);&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;targets = [&quot;p&quot;, &quot;b&quot;];&amp;#10;distractors = [&quot;p&quot;, &quot;b&quot;, &quot;g&quot;];&amp;#10;fillers = [&quot;h&quot;, &quot;l&quot;, &quot;y&quot;];&amp;#10;fillerposes = [&quot;upLeft&quot;, &quot;lowLeft&quot;, &quot;upRight&quot;, &quot;lowRight&quot;];&amp;#10;targetpos = [1, 1];&amp;#10;targetposName = np.random.choice(fillerposes);&amp;#10;if ((targetposName === &quot;upLeft&quot;)) {&amp;#10;    targetpos = filler_up_left_pos;&amp;#10;} else {&amp;#10;    if ((targetposName === &quot;lowLeft&quot;)) {&amp;#10;        targetpos = filler_low_left_pos;&amp;#10;    } else {&amp;#10;        if ((targetposName === &quot;upRight&quot;)) {&amp;#10;            targetpos = filler_up_right_pos;&amp;#10;        } else {&amp;#10;            if ((targetposName === &quot;lowRight&quot;)) {&amp;#10;                targetpos = filler_low_right_pos;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;fillerposes.remove(targetposName);&amp;#10;targetAndDistractor = new FindTargetAndDistractor(allowedPCongruenceA, allowedPIncongruenceA, allowedPNeutralA, allowedBCongruenceA, allowedBIncongruenceA, allowedBNeutralA);&amp;#10;target = targetAndDistractor[0];&amp;#10;distractor = targetAndDistractor[1];&amp;#10;allowedPCongruenceA = targetAndDistractor[2];&amp;#10;allowedPIncongruenceA = targetAndDistractor[3];&amp;#10;allowedPNeutralA = targetAndDistractor[4];&amp;#10;allowedBCongruenceA = targetAndDistractor[5];&amp;#10;allowedBIncongruenceA = targetAndDistractor[6];&amp;#10;allowedBNeutralA = targetAndDistractor[7];&amp;#10;targetletter = target;&amp;#10;if ((target === &quot;p&quot;)) {&amp;#10;    p_targetpos = targetpos;&amp;#10;} else {&amp;#10;    if ((target === &quot;b&quot;)) {&amp;#10;        b_targetpos = targetpos;&amp;#10;    }&amp;#10;}&amp;#10;if ((distractor === &quot;p&quot;)) {&amp;#10;    p_dis_volume = 1.0;&amp;#10;} else {&amp;#10;    if ((distractor === &quot;b&quot;)) {&amp;#10;        b_dis_volume = 1.0;&amp;#10;    } else {&amp;#10;        if ((distractor === &quot;g&quot;)) {&amp;#10;            g_dis_volume = 1.0;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;np.random.shuffle(fillerposes);&amp;#10;np.random.shuffle(fillers);&amp;#10;index = [0, 1, 2];&amp;#10;for (var i, _pj_c = 0, _pj_a = index, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    if (((fillerposes[i] === &quot;upLeft&quot;) &amp;&amp; (fillers[i] === &quot;h&quot;))) {&amp;#10;        h_fillerpos = filler_up_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;upLeft&quot;) &amp;&amp; (fillers[i] === &quot;l&quot;))) {&amp;#10;        l_fillerpos = filler_up_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;upLeft&quot;) &amp;&amp; (fillers[i] === &quot;y&quot;))) {&amp;#10;        y_fillerpos = filler_up_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowLeft&quot;) &amp;&amp; (fillers[i] === &quot;h&quot;))) {&amp;#10;        h_fillerpos = filler_low_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowLeft&quot;) &amp;&amp; (fillers[i] === &quot;l&quot;))) {&amp;#10;        l_fillerpos = filler_low_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowLeft&quot;) &amp;&amp; (fillers[i] === &quot;y&quot;))) {&amp;#10;        y_fillerpos = filler_low_left_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowRight&quot;) &amp;&amp; (fillers[i] === &quot;h&quot;))) {&amp;#10;        h_fillerpos = filler_low_right_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowRight&quot;) &amp;&amp; (fillers[i] === &quot;l&quot;))) {&amp;#10;        l_fillerpos = filler_low_right_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;lowRight&quot;) &amp;&amp; (fillers[i] === &quot;y&quot;))) {&amp;#10;        y_fillerpos = filler_low_right_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;upRight&quot;) &amp;&amp; (fillers[i] === &quot;h&quot;))) {&amp;#10;        h_fillerpos = filler_up_right_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;upRight&quot;) &amp;&amp; (fillers[i] === &quot;l&quot;))) {&amp;#10;        l_fillerpos = filler_up_right_pos;&amp;#10;    }&amp;#10;    if (((fillerposes[i] === &quot;upRight&quot;) &amp;&amp; (fillers[i] === &quot;y&quot;))) {&amp;#10;        y_fillerpos = filler_up_right_pos;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="p_targetpos = (1,1)&amp;#10;b_targetpos = (1,1)&amp;#10;h_fillerpos = (1,1)&amp;#10;l_fillerpos = (1,1)&amp;#10;y_fillerpos = (1,1)&amp;#10;p_dis_volume = 0.0&amp;#10;b_dis_volume = 0.0&amp;#10;g_dis_volume = 0.0&amp;#10;&amp;#10;def FindTargetAndDistractor(allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral):&amp;#10;    tar = np.random.choice(targets);&amp;#10;    tarAndDist = FindDistractor(tar, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral);&amp;#10;    return tarAndDist; &amp;#10;    &amp;#10;def FindDistractor(target, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral):&amp;#10;    &amp;#10;    dist = np.random.choice(distractors);&amp;#10;    if target == 'p' and dist == 'p' and allowedPCongruence &gt; 0:&amp;#10;        allowedPCongruence = allowedPCongruence -1; &amp;#10;        thisExp.addData('Condition', 'Congruent')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;&amp;#10;    elif target == 'p' and dist == 'b' and allowedPIncongruence &gt; 0:&amp;#10;        allowedPIncongruence = allowedPIncongruence -1; &amp;#10;        thisExp.addData('Condition', 'Incongruent')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;   &amp;#10;    elif target == 'p' and dist == 'g' and allowedPNeutral &gt; 0:&amp;#10;        allowedPNeutral = allowedPNeutral -1; &amp;#10;        thisExp.addData('Condition', 'Neutral')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;&amp;#10;    elif target == 'b' and dist == 'p' and allowedBIncongruence &gt; 0:&amp;#10;        allowedBIncongruence = allowedBIncongruence -1; &amp;#10;        thisExp.addData('Condition', 'Incongruent')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;&amp;#10;    elif target == 'b' and dist == 'b' and allowedBCongruence &gt; 0:&amp;#10;        allowedBCongruence = allowedBCongruence -1; &amp;#10;        thisExp.addData('Condition', 'Congruent')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruenceA, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;   &amp;#10;    elif target == 'b' and dist == 'g' and allowedBNeutral &gt; 0:&amp;#10;        allowedBNeutral = allowedBNeutral -1; &amp;#10;        thisExp.addData('Condition', 'Neutral')&amp;#10;        return target, dist, allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral;&amp;#10;    else: &amp;#10;       return FindDistractor(np.random.choice(targets), allowedPCongruence, allowedPIncongruence, allowedPNeutral, allowedBCongruence, allowedBIncongruence, allowedBNeutral);&amp;#10;   &amp;#10;# setup variables to control the experiment&amp;#10;targets = ['p','b'];&amp;#10;distractors = ['p','b','g'];&amp;#10;fillers = ['h','l','y'];&amp;#10;fillerposes = ['upLeft', 'lowLeft', 'upRight', 'lowRight'];&amp;#10;targetpos = (1,1);&amp;#10;&amp;#10;# Setup scene&amp;#10;# Find the target position &amp;#10;targetposName = np.random.choice(fillerposes)&amp;#10;if targetposName == 'upLeft':&amp;#10;    targetpos = filler_up_left_pos;&amp;#10;elif targetposName == 'lowLeft':&amp;#10;    targetpos = filler_low_left_pos;&amp;#10;elif targetposName == 'upRight':&amp;#10;    targetpos = filler_up_right_pos;&amp;#10;elif targetposName == 'lowRight':&amp;#10;    targetpos = filler_low_right_pos;       &amp;#10;fillerposes.remove(targetposName);&amp;#10;# find which will be the target and which will be the distractor&amp;#10;targetAndDistractor = FindTargetAndDistractor(allowedPCongruenceA, allowedPIncongruenceA, allowedPNeutralA, allowedBCongruenceA, allowedBIncongruenceA, allowedBNeutralA)&amp;#10;&amp;#10;target = targetAndDistractor[0];&amp;#10;distractor = targetAndDistractor[1];&amp;#10;&amp;#10;allowedPCongruenceA = targetAndDistractor[2]&amp;#10;allowedPIncongruenceA = targetAndDistractor[3]&amp;#10;allowedPNeutralA = targetAndDistractor[4]&amp;#10;allowedBCongruenceA = targetAndDistractor[5]&amp;#10;allowedBIncongruenceA = targetAndDistractor[6]&amp;#10;allowedBNeutralA = targetAndDistractor[7]&amp;#10;&amp;#10;targetletter = target; &amp;#10;&amp;#10;if target == 'p':&amp;#10;    p_targetpos = targetpos&amp;#10;elif target == 'b':&amp;#10;    b_targetpos = targetpos&amp;#10;&amp;#10;if distractor == 'p':&amp;#10;    p_dis_volume = 1.0&amp;#10;elif distractor == 'b':&amp;#10;    b_dis_volume = 1.0&amp;#10;elif distractor == 'g':&amp;#10;    g_dis_volume = 1.0&amp;#10;# Randomly place the fillers &amp;#10;&amp;#10;np.random.shuffle(fillerposes);&amp;#10;np.random.shuffle(fillers);&amp;#10;index = (0,1,2)&amp;#10;&amp;#10;for i in index:&amp;#10;        if fillerposes[i] == 'upLeft' and fillers[i] == 'h':&amp;#10;            h_fillerpos = filler_up_left_pos;&amp;#10;        if fillerposes[i] == 'upLeft' and fillers[i] == 'l':&amp;#10;            l_fillerpos = filler_up_left_pos;&amp;#10;        if fillerposes[i] == 'upLeft' and fillers[i] == 'y':&amp;#10;            y_fillerpos = filler_up_left_pos;&amp;#10;            &amp;#10;        if fillerposes[i] == 'lowLeft' and fillers[i] == 'h':&amp;#10;            h_fillerpos = filler_low_left_pos;&amp;#10;        if fillerposes[i] == 'lowLeft' and fillers[i] == 'l':&amp;#10;            l_fillerpos = filler_low_left_pos;&amp;#10;        if fillerposes[i] == 'lowLeft' and fillers[i] == 'y':&amp;#10;            y_fillerpos = filler_low_left_pos;&amp;#10;            &amp;#10;        if fillerposes[i] == 'lowRight' and fillers[i] == 'h':&amp;#10;            h_fillerpos = filler_low_right_pos;&amp;#10;        if fillerposes[i] == 'lowRight' and fillers[i] == 'l':&amp;#10;            l_fillerpos = filler_low_right_pos;&amp;#10;        if fillerposes[i] == 'lowRight' and fillers[i] == 'y':&amp;#10;            y_fillerpos = filler_low_right_pos;&amp;#10;            &amp;#10;        if fillerposes[i] == 'upRight' and fillers[i] == 'h':&amp;#10;            h_fillerpos = filler_up_right_pos;&amp;#10;        if fillerposes[i] == 'upRight' and fillers[i] == 'l':&amp;#10;            l_fillerpos = filler_up_right_pos;&amp;#10;        if fillerposes[i] == 'upRight' and fillers[i] == 'y':&amp;#10;            y_fillerpos = filler_up_right_pos;&amp;#10;    &amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="AudioController" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="p_Target_3">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="p_Target_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="p_targetpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="p" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="b_Target_3">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="b_Target_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="b_targetpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="b" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="h_Filler_3">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="h_Filler_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="h_fillerpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="h" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="l_Filler_3">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="l_Filler_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="l_fillerpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="l" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="y_filler_3">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans ExtraBold" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="num" updates="constant" name="letterHeight"/>
        <Param val="y_filler_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="y_fillerpos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="y" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <SoundComponent name="p_Dis_Sound_2">
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="hamming"/>
        <Param val="p_Dis_Sound_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="audio/p.wav" valType="str" updates="constant" name="sound"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
        <Param val="p_dis_volume" valType="num" updates="set every repeat" name="volume"/>
      </SoundComponent>
      <SoundComponent name="b_Dis_Sound_2">
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="hamming"/>
        <Param val="b_Dis_Sound_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="audio/b.wav" valType="str" updates="constant" name="sound"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
        <Param val="b_dis_volume" valType="num" updates="set every repeat" name="volume"/>
      </SoundComponent>
      <SoundComponent name="g_Dis_Sound_2">
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="hamming"/>
        <Param val="g_Dis_Sound_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="audio/g.wav" valType="str" updates="constant" name="sound"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
        <Param val="g_dis_volume" valType="num" updates="set every repeat" name="volume"/>
      </SoundComponent>
      <CodeComponent name="recordAttentionReaction_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="enableHappyface = false;&amp;#10;enableSadface = false;&amp;#10;enableFaster = false;&amp;#10;if ((targetletter === &quot;p&quot;)) {&amp;#10;    isItP = true;&amp;#10;    isItB = false;&amp;#10;}&amp;#10;if ((targetletter === &quot;b&quot;)) {&amp;#10;    isItB = true;&amp;#10;    isItP = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="enableHappyface = False;&amp;#10;enableSadface = False;&amp;#10;enableFaster = False;&amp;#10;&amp;#10;if targetletter == 'p':&amp;#10;    isItP = True;&amp;#10;    isItB = False; &amp;#10;    &amp;#10;if targetletter == 'b':&amp;#10;    isItB = True;&amp;#10;    isItP = False; " valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#button[0] = left click = P &amp;#10;#button[2] = right click = B&amp;#10;&amp;#10;buttons = mouse.getPressed()&amp;#10;&amp;#10;if isItP and buttons[0] == 1:&amp;#10;    enableHappyface = True;&amp;#10;    enableSadface = False;&amp;#10;    enableFaster = False; &amp;#10;elif isItB and buttons[2] == 1:&amp;#10;    enableHappyface = True;&amp;#10;    enableSadface = False;&amp;#10;    enableFaster = False;&amp;#10;elif isItP and buttons[2] == 1:&amp;#10;    enableHappyface = False;&amp;#10;    enableSadface = True;&amp;#10;    enableFaster = False;  &amp;#10;elif isItB and buttons[0] == 1:&amp;#10;    enableHappyface = False;&amp;#10;    enableSadface = True;&amp;#10;    enableFaster = False; " valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="buttons = mouse.getPressed();&amp;#10;if ((isItP &amp;&amp; (buttons[0] === 1))) {&amp;#10;    enableHappyface = true;&amp;#10;    enableSadface = false;&amp;#10;    enableFaster = false;&amp;#10;} else {&amp;#10;    if ((isItB &amp;&amp; (buttons[2] === 1))) {&amp;#10;        enableHappyface = true;&amp;#10;        enableSadface = false;&amp;#10;        enableFaster = false;&amp;#10;    } else {&amp;#10;        if ((isItP &amp;&amp; (buttons[2] === 1))) {&amp;#10;            enableHappyface = false;&amp;#10;            enableSadface = true;&amp;#10;            enableFaster = false;&amp;#10;        } else {&amp;#10;            if ((isItB &amp;&amp; (buttons[0] === 1))) {&amp;#10;                enableHappyface = false;&amp;#10;                enableSadface = true;&amp;#10;                enableFaster = false;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (((enableHappyface === false) &amp;&amp; (enableSadface === false))) {&amp;#10;    enableFaster = true;&amp;#10;}&amp;#10;if ((enableHappyface === true)) {&amp;#10;    psychoJS.experiment.addData(&quot;Response&quot;, &quot;Correct&quot;);&amp;#10;    psychoJS.experiment.addData(&quot;Response_code&quot;, 1.0);&amp;#10;}&amp;#10;if ((enableSadface === true)) {&amp;#10;    psychoJS.experiment.addData(&quot;Response&quot;, &quot;Incorrect&quot;);&amp;#10;    psychoJS.experiment.addData(&quot;Response_code&quot;, 2.0);&amp;#10;}&amp;#10;if ((enableFaster === true)) {&amp;#10;    psychoJS.experiment.addData(&quot;Response&quot;, &quot;None&quot;);&amp;#10;    psychoJS.experiment.addData(&quot;Response_code&quot;, 0.0);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if enableHappyface == False and enableSadface == False:&amp;#10;    enableFaster = True; &amp;#10;    &amp;#10;if enableHappyface == True:   &amp;#10;    thisExp.addData('Response', 'Correct')&amp;#10;    thisExp.addData('Response_code', 1.0)&amp;#10;    &amp;#10;if enableSadface == True:   &amp;#10;    thisExp.addData('Response', 'Incorrect')&amp;#10;    thisExp.addData('Response_code', 2.0)&amp;#10;    &amp;#10;if enableFaster == True:   &amp;#10;    thisExp.addData('Response', 'None')&amp;#10;    thisExp.addData('Response_code', 0.0)&amp;#10;    &amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="recordAttentionReaction_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouse_3">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="any click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_3" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <ImageComponent name="whiteimage_3">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="1.0000, 1.0000, 1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="graphic/black.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="whiteimage_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="Intro"/>
    <LoopInitiator loopType="TrialHandler" name="VisualDistractionTrials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="12" valType="num"/>
      <Param name="name" updates="None" val="VisualDistractionTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="FixationCross"/>
    <Routine name="VisualDistractorStimuli"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="VisualDistractionTrials"/>
    <Routine name="Pause"/>
    <LoopInitiator loopType="TrialHandler" name="VisualAndAudioDistractor">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="12" valType="num"/>
      <Param name="name" updates="None" val="VisualAndAudioDistractor" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="FixationCross"/>
    <Routine name="AudioVisualDistractorStimuli"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="VisualAndAudioDistractor"/>
    <Routine name="Pause"/>
    <LoopInitiator loopType="TrialHandler" name="AudioDistractorFiles">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="12" valType="num"/>
      <Param name="name" updates="None" val="AudioDistractorFiles" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="FixationCross"/>
    <Routine name="AudioDistractorStimuli"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="AudioDistractorFiles"/>
  </Flow>
</PsychoPy2experiment>
